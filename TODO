[x] - done
[v] - now working
[-] - dropped idea
[>] - moved to other point
[z] - failures

1) [x] Move waiting duration to Settings 
2) [ ] prepare TypeScript test page
3) [>] Add checking to DB data methods
4) [v] Add routes
    - [ ] GET user
        - [ ] OK
        - [ ] fail/user do not exist
    - [ ] POST user
        - [ ] OK/return new entry
        - [ ] fail
    - [ ] DELETE user
        - [ ] OK
        - [ ] fail
    - [ ] GET Task
        - [ ] OK
        - [ ] fail
    - [ ] POST Task
        - [ ] OK/return new entry
        - [ ] fail
    - [ ] PUT Task
        - [ ] OK/return new/modified entry
        - [ ] fail
    - [ ] DELETE Task
        - [ ] OK/return deleted entry
        - [ ] fail
    - [ ] GET Project
        - [ ] OK/return entry
        - [ ] fail
    - [ ] POST Project
        - [ ] OK/return entry
        - [ ] fail
    - [ ] PUT Project
        - [ ] OK/return entry
        - [ ] fail
    - [ ] DELETE Project
        - [ ] OK/return deleted entry
        - [ ] fail
    - [ ] GET ProjectsWithTasks
        - [ ] OK/return project with lists of task (nested)
        - [ ] fail
5) [v] Data Base and DataModels
    - [x] check overlapping when adding a new task
    - [x] ban adding new task if tasks overlapping
    - [x] no projects with the same name
    - [>] added Facade for adding Task => merged into one object
    - [>] added Facade for adding Project => merged into one object
    - [>] added Facade for adding User => merged into one object
    - [x] separate DB Base from Facade
    - [x] get full Project
    - [-] Duration => Period
    - [ ] When there can be only one answer (project, User) List => Option
    - [ ] remove project key from task, when it is a part of Project List
    - [x] UUID as user ID
    - [>] only user can delete data
    - [>] only user can modify data
    - [x] checking data author (Task, Project)
    - [ ] project stats
    - [x] project filters
    - [x] project sorting
    - [x] task replacing
    - [ ] user or user or alias
    - [x] pagination
    - [ ] Separate Input and Output data models
6) JSONs
    - [x] JWT coding
    - [ ] Requests
        - [ ] Add User
        - [ ] Add Task
        - [ ] Add Project
        - [-] Get Project with Tasks
    - [ ] Responses
        - [ ] Users
            - [ ] ok
            - [ ] Errors
                - [ ] GET not in DB
                - [ ] POST has already used name
                - [ ] POST Name too long
                - [ ] POST Name too short
        - [ ] Tasks
            - [ ] Ok
            - [ ] Errors
                - [ ] tasks are overlapping
                - [ ] Datetimes are not properly formatted
                - [ ] start datetime is earlier than end datetime
                - [ ] Too long strings
        - [ ] Projects
            - [ ] ok
            - [ ] Errors
                - [ ] POST has already used name
                - [ ] POST do not have properly formatted datetime
                - [ ] POST Name too long
                - [ ] POST Name too short
        - [ ] Project with tasks
            - [ ] ok
7) [x] Choose datetime data type
8) [z, >] Bug in test("DB - add, get and remove task")
9) [z] Generalize gets in DB
10) [z, -] Change Queries to String subclass
11) [-] Remove Unit - all functions should return something
12) [ ] Separate Config for Secrets
13) [z] Combining mutiple filters into one; duck typing
14) [z] replace if/else constructions in DBFacade.getListOfProjects by case/match (data types and methods)
15) [z] replace if/else constructions in DBFacade.filterProjects by case/match (pattern matching results data flow resembling tree graph,
which do not resemble actual flow)
16) [ ] assure that all test are working in te same manner